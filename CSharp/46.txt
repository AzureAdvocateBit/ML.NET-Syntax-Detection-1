using Syncfusion.XlsIO;using System.Collections.Generic;using System.IO;using System.Xml.Serialization;namespace Template\_Marker\_Nested\_Collection{ class Program { static void Main(string[] args) { ApplyLayout(); } static void ApplyLayout() { using (ExcelEngine excelEngine = new ExcelEngine()) { IApplication application = excelEngine.Excel; application.DefaultVersion = ExcelVersion.Excel2016; IWorkbook workbook = excelEngine.Excel.Workbooks.Open("../../Data/NestedColl-Template-Default.xlsx"); IWorksheet worksheet = workbook.Worksheets[0]; //Create Template Marker Processor ITemplateMarkersProcessor marker = workbook.CreateTemplateMarkersProcessor(); //Add collection to the marker variables where the name should match with input template marker.AddVariable("BrandObject", GetVehicleDetails()); //Process the markers in the template marker.ApplyMarkers(); string fileName = @"ExportData-DefaultLayout.xlsx"; workbook.SaveAs(fileName); workbook.Close(); } } #region Helper Methods //Helper Method static private IList<Brand> GetVehicleDetails() { XmlSerializer deserializer = new XmlSerializer(typeof(BrandObjects)); //Read data from XML file. TextReader textReader = new StreamReader(@"..\..\Data\ExportData.xml"); BrandObjects brands = (BrandObjects)deserializer.Deserialize(textReader); //Initialize parent collection to add data from XML file. List<Brand> list = new List<Brand>(); string brandName = brands.BrandObject[0].BrandName; string vehicleType = brands.BrandObject[0].VahicleType; string modelName = brands.BrandObject[0].ModelName; //Parent class Brand brand = new Brand(brandName); brand.VehicleTypes = new List<VehicleType>(); VehicleType vehicle = new VehicleType(vehicleType); vehicle.Models = new List<Model>(); Model model = new Model(modelName); brand.VehicleTypes.Add(vehicle); list.Add(brand); foreach (BrandObject brandObj in brands.BrandObject) { if (brandName == brandObj.BrandName) { if (vehicleType == brandObj.VahicleType) { vehicle.Models.Add(new Model(brandObj.ModelName)); continue; } else { vehicle = new VehicleType(brandObj.VahicleType); vehicle.Models = new List<Model>(); vehicle.Models.Add(new Model(brandObj.ModelName)); brand.VehicleTypes.Add(vehicle); vehicleType = brandObj.VahicleType; } continue; } else { brand = new Brand(brandObj.BrandName); vehicle = new VehicleType(brandObj.VahicleType); vehicle.Models = new List<Model>(); vehicle.Models.Add(new Model(brandObj.ModelName)); brand.VehicleTypes = new List<VehicleType>(); brand.VehicleTypes.Add(vehicle); vehicleType = brandObj.VahicleType; list.Add(brand); brandName = brandObj.BrandName; } } textReader.Close(); return list; } #endregion }}
