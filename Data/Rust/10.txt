fn max_sliding_window(nums: &Vec<i32>, k: usize) -> Vec<i32> {
    let mut result = Vec::new();
    
    if nums.len() == 0 || k <= 0 {
        return result;
    }
    
    let mut k = k;
    if k > nums.len() {
        k = nums.len();
    }
    
    let mut window = Vec::new();
    
    for i in 0..k {
        while !window.is_empty() && nums[i] >= nums[window[window.len()-1]] {
            window.pop();
        }
        
        window.push(i);
    }
    
    for i in k..nums.len() {
        result.push(nums[window[0]]);
        
        while !window.is_empty() && window[0] <= i - k {
             window.remove(0);
        }
        
        while !window.is_empty() && nums[i] >= nums[window[window.len() - 1]] {
            window.pop();
        }
        
        window.push(i);
    }
    
    result.push(nums[window[0]]);
    result
}

fn main() {
  let nums = vec![1, 3, -1, -3, 5, 3, 6, 7];
  println!("{:?}", max_sliding_window(&nums, 3));
  assert_eq!(vec![3, 3, 5, 5, 6, 7], max_sliding_window(&nums, 3));
  assert_eq!(vec![1], max_sliding_window(&vec![1], 1));
  //assert_eq!(Vec::new() as Vec<i32>, max_sliding_window(&vec![], 0));
}