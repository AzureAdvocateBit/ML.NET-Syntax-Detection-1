import java.sql.*;

public class TestConnection {

	public static void main(String[] args) {
		try {
			// Загрузка драйвера
			Class.forName("org.h2.Driver");
			System.out.println("Driver loading success!");

			// Установка соединения с базой данных
			Connection conn = DriverManager.getConnection("jdbc:h2:~/test", "sa", "");

			// Подготовка к выполнению запроса
			Statement stat = conn.createStatement();
			// Выполнение запросов
			stat.execute("CREATE TABLE Greetings (Name CHAR(20))");
			stat.execute("INSERT INTO Greetings VALUES ('Hello, World!')");
			// Выполнение запроса и получение результата
			ResultSet result = stat.executeQuery("SELECT * FROM Greetings");
			// Считываем одну строку
			result.next();
			// Вывод на экран значения из первой колонки таблицы
			System.out.println(result.getString(1));
			// Не забываем закрыть ResultSet
			result.close();
			stat.execute("DROP TABLE Greetings");
			
			// Подготовка к выполнению запроса с возможностью прокрутки
			// и обновления данных
			Statement stat2 = conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE,
					ResultSet.CONCUR_UPDATABLE);
			ResultSet rs = stat2.executeQuery("select * from customers");
			
//			Statement stat2 = conn.prepareStatement("select * from customers");
//			ResultSet rs2 = stat2.execute();
			
			while(rs.next()) {
				System.out.println(rs.getString("name"));
			}

			// Если драйвер базы поддерживает возможность обновления данных через JDBC			
			if(rs.getConcurrency() == ResultSet.CONCUR_UPDATABLE) {
				System.out.println("Updateble row");
				rs.moveToCurrentRow();
				rs.updateInt("id", 13);
				rs.updateString("name", "New name");
				rs.updateString("phone", "3123123");
				rs.updateString("address", "asdfa");
				rs.updateString("email", "emailtest");
				rs.insertRow();
			}
			rs.last();
			rs.deleteRow();
			
			rs.close();

			// Получить мета-данные о базе
//			DatabaseMetaData metaData= conn.getMetaData();
			// Получить сведения о всех таблицах в базе
//			ResultSet metaRs = metaData.getTables(null, null, null, new String[]{"TABLE"});
//			
//			while(metaRs.next()) {
//				System.out.println(rs.getString(3));
//			}
//			
//			metaRs.close();
			
			ResultSetMetaData meta = rs.getMetaData();
			
			for(int i = 1; i <= meta.getColumnCount(); i++) {
				String columnName = meta.getColumnLabel(i);
				int columnWidth = meta.getColumnDisplaySize(i);
				
				System.out.println("Column name: " + columnName +
						" : " + columnWidth);
			}
			
			// ТРАНЗАКЦИИ
			// Проверяем, поддерживает ли база данных возможность
			// автоматического подтверждения транзакций 
			// (каждый запрос - отдельная транзакция)
			if(conn.getAutoCommit()) {
				// Отключаем автоподтверждение
				conn.setAutoCommit(false);
				
				// Выполняем несколько запросов
				stat2 = conn.createStatement();
				stat2.executeUpdate("update customers set name = 'Hello1' where name = 'Hello'");
				stat2.executeUpdate("insert into customers values(13, 'Hello2', '', '', '')");
				
				// Если все запросы выполнились успешно, то можно
				// закрыть транзакцию (подтвердить изменения):
				conn.commit();
				// Если что-то пошло не так, то можно отменить все изменения
				// сделанные запросами в рамках данной транзакции:
//				conn.rollback();
			}

			// Обязательно закрываем Statement и соединение с базой		
			stat2.close();
			conn.close();
		} catch(ClassNotFoundException ex) {
			ex.printStackTrace();
		} catch(SQLException ex) {
			ex.printStackTrace();
		}
	}
}